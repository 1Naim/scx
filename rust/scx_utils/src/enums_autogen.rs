
/*
 * WARNING: This file is autogenerated from scripts/gen_enums.py. If you would
 * like to access an enum that is currently missing, add it to the script
 * and run it from the root directory to update this file.
 */

pub mod enums_autogen {
	use crate::compat::read_enum;

	lazy_static::lazy_static! {
		pub static ref SCX_OPS_NAME_LEN: u64 =
		read_enum("scx_public_consts", "SCX_OPS_NAME_LEN").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_SLICE_DFL: u64 =
		read_enum("scx_public_consts", "SCX_SLICE_DFL").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_SLICE_INF: u64 =
		read_enum("scx_public_consts", "SCX_SLICE_INF").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_DSQ_FLAG_BUILTIN: u64 =
		read_enum("scx_dsq_id_flags", "SCX_DSQ_FLAG_BUILTIN").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_DSQ_FLAG_LOCAL_ON: u64 =
		read_enum("scx_dsq_id_flags", "SCX_DSQ_FLAG_LOCAL_ON").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_DSQ_INVALID: u64 =
		read_enum("scx_dsq_id_flags", "SCX_DSQ_INVALID").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_DSQ_GLOBAL: u64 =
		read_enum("scx_dsq_id_flags", "SCX_DSQ_GLOBAL").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_DSQ_LOCAL: u64 =
		read_enum("scx_dsq_id_flags", "SCX_DSQ_LOCAL").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_DSQ_LOCAL_ON: u64 =
		read_enum("scx_dsq_id_flags", "SCX_DSQ_LOCAL_ON").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_DSQ_LOCAL_CPU_MASK: u64 =
		read_enum("scx_dsq_id_flags", "SCX_DSQ_LOCAL_CPU_MASK").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_QUEUED: u64 =
		read_enum("scx_ent_flags", "SCX_TASK_QUEUED").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_RESET_RUNNABLE_AT: u64 =
		read_enum("scx_ent_flags", "SCX_TASK_RESET_RUNNABLE_AT").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_DEQD_FOR_SLEEP: u64 =
		read_enum("scx_ent_flags", "SCX_TASK_DEQD_FOR_SLEEP").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_STATE_SHIFT: u64 =
		read_enum("scx_ent_flags", "SCX_TASK_STATE_SHIFT").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_STATE_BITS: u64 =
		read_enum("scx_ent_flags", "SCX_TASK_STATE_BITS").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_STATE_MASK: u64 =
		read_enum("scx_ent_flags", "SCX_TASK_STATE_MASK").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_CURSOR: u64 =
		read_enum("scx_ent_flags", "SCX_TASK_CURSOR").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_NONE: u64 =
		read_enum("scx_task_state", "SCX_TASK_NONE").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_INIT: u64 =
		read_enum("scx_task_state", "SCX_TASK_INIT").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_READY: u64 =
		read_enum("scx_task_state", "SCX_TASK_READY").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_ENABLED: u64 =
		read_enum("scx_task_state", "SCX_TASK_ENABLED").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_NR_STATES: u64 =
		read_enum("scx_task_state", "SCX_TASK_NR_STATES").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_TASK_DSQ_ON_PRIQ: u64 =
		read_enum("scx_ent_dsq_flags", "SCX_TASK_DSQ_ON_PRIQ").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_KICK_IDLE: u64 =
		read_enum("scx_kick_flags", "SCX_KICK_IDLE").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_KICK_PREEMPT: u64 =
		read_enum("scx_kick_flags", "SCX_KICK_PREEMPT").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_KICK_WAIT: u64 =
		read_enum("scx_kick_flags", "SCX_KICK_WAIT").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_ENQ_WAKEUP: u64 =
		read_enum("scx_enq_flags", "SCX_ENQ_WAKEUP").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_ENQ_HEAD: u64 =
		read_enum("scx_enq_flags", "SCX_ENQ_HEAD").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_ENQ_PREEMPT: u64 =
		read_enum("scx_enq_flags", "SCX_ENQ_PREEMPT").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_ENQ_REENQ: u64 =
		read_enum("scx_enq_flags", "SCX_ENQ_REENQ").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_ENQ_LAST: u64 =
		read_enum("scx_enq_flags", "SCX_ENQ_LAST").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_ENQ_CLEAR_OPSS: u64 =
		read_enum("scx_enq_flags", "SCX_ENQ_CLEAR_OPSS").unwrap_or(0);
	}

	lazy_static::lazy_static! {
		pub static ref SCX_ENQ_DSQ_PRIQ: u64 =
		read_enum("scx_enq_flags", "SCX_ENQ_DSQ_PRIQ").unwrap_or(0);
	}

}